AWSTemplateFormatVersion: "2010-09-09"
Description: CloudFormation template to deploy an RDS PostgreSQL instance with PGvector extension in a VPC.

Parameters:
  DBInstanceClass:
    Description: The database instance class
    Type: String
    Default: db.t4g.micro
    AllowedValues:
      - db.t4g.micro
      - db.t3.medium
      - db.t3.large
      - db.m5.large
  AllocatedStorage:
    Description: The size of the database (in GB)
    Type: Number
    Default: 30
  DBUsername:
    Description: The database admin username
    Type: String
    NoEcho: true
  DBPassword:
    Description: The database admin password
    Type: String
    NoEcho: true
  DBName:
    Description: The name of the PostgreSQL database
    Type: String
    Default: mydb
  VPCCIDR:
    Description: CIDR block for the VPC
    Type: String
    Default: 10.0.0.0/16
  PublicSubnetCIDR1:
    Description: CIDR block for the public subnet in Availability Zone 1
    Type: String
    Default: 10.0.1.0/24
  PublicSubnetCIDR2:
    Description: CIDR block for the public subnet in Availability Zone 2
    Type: String
    Default: 10.0.2.0/24
  PrivateSubnetCIDR1:
    Description: CIDR block for the private subnet in Availability Zone 1
    Type: String
    Default: 10.0.3.0/24
  PrivateSubnetCIDR2:
    Description: CIDR block for the private subnet in Availability Zone 2
    Type: String
    Default: 10.0.4.0/24
  MultiAZ:
    Description: Enable Multi-AZ for the RDS instance
    Type: String
    Default: false
    AllowedValues:
      - true
      - false
  ExistingVPCId:
    Type: String
    Description: The ID of the existing VPC (leave empty if creating a new VPC)
    Default: ""
  ExistingPublicSubnet1Id:
    Type: String
    Description: The ID of the existing public subnet in AZ1 (leave empty if creating a new VPC)
    Default: ""
  ExistingPublicSubnet2Id:
    Type: String
    Description: The ID of the existing public subnet in AZ2 (leave empty if creating a new VPC)
    Default: ""
  CreateVPC:
    Description: Create a new VPC if set to true
    Type: String
    Default: "false"
    AllowedValues: ["true", "false"]
  MaxConnections:
    Description: Maximum number of database connections
    Type: Number
    Default: 100
    MinValue: 20
    MaxValue: 5000

Conditions:
  ShouldCreateVPC: !Equals [!Ref CreateVPC, "true"]
  UseExistingVPC: !And 
    - !Not [!Condition ShouldCreateVPC]
    - !Not [!Equals [!Ref ExistingVPCId, ""]]

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Condition: ShouldCreateVPC
    Properties:
      CidrBlock: !Ref VPCCIDR
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: RDS-VPC

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Condition: ShouldCreateVPC

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Condition: ShouldCreateVPC
    Properties:
      VpcId: !Ref VPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Condition: ShouldCreateVPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs "" ]
      CidrBlock: !Ref PublicSubnetCIDR1
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 1

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Condition: ShouldCreateVPC
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 1, !GetAZs "" ]
      CidrBlock: !Ref PublicSubnetCIDR2
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: Public Subnet 2

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Condition: ShouldCreateVPC
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: Public Route Table

  PublicRoute:
    Type: AWS::EC2::Route
    Condition: ShouldCreateVPC
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ShouldCreateVPC
    Properties:
      SubnetId: !Ref PublicSubnet1
      RouteTableId: !Ref PublicRouteTable

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Condition: ShouldCreateVPC
    Properties:
      SubnetId: !Ref PublicSubnet2
      RouteTableId: !Ref PublicRouteTable

  RDSDBSubnetGroup:
    Type: AWS::RDS::DBSubnetGroup
    Properties:
      DBSubnetGroupDescription: Subnet group for RDS
      SubnetIds: !If 
        - ShouldCreateVPC
        - [!Ref PublicSubnet1, !Ref PublicSubnet2]
        - [!Ref ExistingPublicSubnet1Id, !Ref ExistingPublicSubnet2Id]

  RDSSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Enable access to the RDS instance
      VpcId: !If [ShouldCreateVPC, !Ref VPC, !Ref ExistingVPCId]
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 5432
          ToPort: 5432
          CidrIp: 0.0.0.0/0  # Allow from anywhere (for testing only)

  RDSParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Family: postgres16
      Description: Custom parameter group for PostgreSQL 16 with pgvector
      Parameters:
        max_connections: !Ref MaxConnections

  RDSInstance:
    Type: AWS::RDS::DBInstance
    Properties:
      DBInstanceClass: !Ref DBInstanceClass
      AllocatedStorage: !Ref AllocatedStorage
      DBName: !Ref DBName
      Engine: postgres
      EngineVersion: 16.3  # Version that supports pgvector
      MasterUsername: !Ref DBUsername
      MasterUserPassword: !Ref DBPassword
      VPCSecurityGroups:
        - !Ref RDSSecurityGroup
      DBSubnetGroupName: !Ref RDSDBSubnetGroup
      MultiAZ: !Ref MultiAZ
      PubliclyAccessible: true
      StorageEncrypted: true
      Tags:
        - Key: Name
          Value: PGVectorRDSInstance
      EnableCloudwatchLogsExports:
        - postgresql
      DBParameterGroupName: !Ref RDSParameterGroup

Outputs:
  RDSInstanceEndpoint:
    Description: The connection endpoint for the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Address
  RDSPort:
    Description: The port number of the RDS instance
    Value: !GetAtt RDSInstance.Endpoint.Port
  VPCId:
    Description: The ID of the VPC
    Value: !If [ShouldCreateVPC, !Ref VPC, !Ref ExistingVPCId]
  PublicSubnet1Id:
    Description: The ID of Public Subnet 1
    Value: !If [ShouldCreateVPC, !Ref PublicSubnet1, !Ref ExistingPublicSubnet1Id]
  PublicSubnet2Id:
    Description: The ID of Public Subnet 2
    Value: !If [ShouldCreateVPC, !Ref PublicSubnet2, !Ref ExistingPublicSubnet2Id]
